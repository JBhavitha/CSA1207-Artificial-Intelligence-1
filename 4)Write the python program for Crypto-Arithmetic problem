from itertools import permutations
def is_valid(puzzle, mapping):
    words = puzzle.split()
    equation = ' '.join([''.join([mapping[c] for c in word]) for word in words])
    return eval(equation)
def solve_crypto_arithmetic(puzzle, init_mapping={}):
    unique_letters = set("".join(puzzle.split()))
    digit_permutations = permutations('0123456789', len(unique_letters))
    for perm in digit_permutations:
        mapping = dict(zip(unique_letters, perm))
        mapping.update(init_mapping)
        if '0' in mapping.values():
            continue
        if is_valid(puzzle, mapping):
            return mapping
    return None
if __name__ == "__main__":
    puzzle = "SEND + MORE = MONEY"
    
    initial_mapping = {
        'M': '1',
        'O': '0',
        'S': '2',
        'N': '6',
        'E': '5',
        'D': '7',
        'R': '8',
        'Y': '9'
    }
    solution = solve_crypto_arithmetic(puzzle, initial_mapping)
    if solution:
        print("Solution found:")
        for letter, digit in solution.items():
            print(f"{letter} -> {digit}")
    else:
        print("No solution found.")
